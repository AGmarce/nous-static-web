#! /bin/bash

nous()(
  set -eu -o pipefail
     SCRIPT_BASE=$(dirname $(dirname "$(readlink -f ${BASH_SOURCE[0]})"))
     fatal(){
         >&2 echo -e "\nnous FATAL\n $@\n" && exit 1 ;
     }
 
     usage(){
     cat <<-EOM

        NAME
           nous  -  Motor de plantillas para objetos semánticos

        SYNOPSIS

            nous [g|gen|generar] PLANTILLA CONTENIDO DISENO               # generar el sitio 
            nous [p|pla|plantilla]                                        lista de plantillas
            nous c|conf|configuración                                     # mostrar los configuraciones (variables de entorno)
            nous v|ver|versión                                            # version del programa
            nous help|man|usage                                           # mostrar página de ayuda

        ARGS
        
            PLANTILLA

            CONTENIDO

            DISENO

       VARIABLE DE ENTORNO

         RERPERTORIO_DE_PRODUCTO



EOM
}
  afirmar_archivo_existe(){
    local OPTIND o msg
    msg="El archivo '$1' no existe" 
    while getopts "m:" o; do
      case "$o" in
        m) msg="${OPTARG}" ;;
       esac
    done
    shift $((OPTIND -1))
    [ -f "$1" ] || fatal $msg;
  }
  afirmar_repositorio_existe(){
    local OPTIND o msg
    msg="El repositorio '$1' no existe" 
    while getopts "m:" o; do
      case "$o" in
        m) msg="${OPTARG}" ;;
       esac
    done
    shift $((OPTIND -1))
    [ -f "$1" ] || fatal $msg;
  }

  kv(){ echo "$1: ${!1}" ; }

  _init_config(){
    REPERTORIO_DE_PLANTILLA=${SCRIPT_BASE}/plantilla
    REPERTORIO_DE_PRODUCTO="${REPERTORIO_DE_PRODUCTO:-$(pwd)/build}"  
  }

  # VERBOS
  version(){
    # monstrar la version, rama y git ref
    echo "branch: $(git -C ${SCRIPT_BASE} branch | grep \* | awk '{ print $2}' )"
    echo "ref:    $(git -C ${SCRIPT_BASE} rev-parse HEAD)"
  }
  conf(){
    kv SCRIPT_BASE
    kv REPERTORIO_DE_PRODUCTO
    kv REPERTORIO_DE_PLANTILLA
  }

  generar(){

    plantilla_repertorio=$REPERTORIO_DE_PLANTILLA/$1
    afirmar_repositorio_existe -m "El plantilla '$1' no existe" "$plantilla_repertorio" 

    #contenido=$2
    #diseno=$3
    contenido=$REPERTORIO_DE_PLANTILLA/$template/contenido-defecto.yml
    diseno=$REPERTORIO_DE_PLANTILLA/$template/diseno.yml
    plantilla_index=$REPERTORIO_DE_PLANTILLA/$template/index.html.mustache

    afirmar_archivo_existe "$contenido"
    afirmar_archivo_existe "$diseno"
    afirmar_archivo_existe "$contenido"

    [ ! -z "${REINICIAR:-}" ] || rm -rf "$REPERTORIO_DE_PRODUCTO"
    mkdir -p $REPERTORIO_DE_PRODUCTO
    [ ! -z "$(which iirsync 2> /dev/null)"  ] && \
      _copia(){  rsync -a $@  ; } || \
      _copia(){ cp -R  $1 $2/assets ; }  
    _copia "$SCRIPT_BASE"/assets $REPERTORIO_DE_PRODUCTO
    cat $contenido $diseno | mustache $plantilla_index > $REPERTORIO_DE_PRODUCTO/index.html
  }

  plantilla(){
    ls $REPERTORIO_DE_PLANTILLA
  }

  while getopts "dr" opt; do
    case ${opt} in
      d) set -x ;;
      r) REINCIAR=TRUE;;
    esac
  done

  shift $((OPTIND -1)) 


  # Parse et valide les arguments
  nous_COMMAND=${1:-g}

  case ${nous_COMMAND} in
    usage|help|man|h|-h|--help) set -- usage ${@:2} ;;
    c|conf|configuración) _init_config; set -- conf ;;
    v|ver|versión) set -- version;;
    g|gen|generar) _init_config; set -- generar ${@:2} ;;
    p|pla|plantilla) _init_config; set -- plantilla ${@:2} ;;
    *) echo "Commande '$1' non reconnu"; exit 1 ;;
  esac

  # ejecutar
  $@
)
[ "${BASH_SOURCE[0]}"  != "$0" ] || nous $@
